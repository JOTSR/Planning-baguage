{
	"fmt": {
		"options": {
			"useTabs": true,
			"indentWidth": 4,
			"semiColons": false,
			"singleQuote": true
		},
		"files": {
			"exclude": [
				"*.gen.ts"
			]
		}
	},
	"tasks": {
		"dev:serviceworker": "deno bundle --no-check --watch ./static/sw.ts ./static/sw.js",
		"dev:app": "deno bundle --no-check --watch ./static/app.ts ./static/app.js",
		"start": "deno run -A --watch=static/,routes/ dev.ts & deno task dev:app & deno task dev:serviceworker",
		"deploy:dev": "deployctl deploy --project=planning-baguage ./main.ts",
		"deploy:prod": "deployctl deploy --project=planning-baguage --prod ./main.ts",
		"build:serviceworker": "deno bundle --no-check ./static/sw.ts ./static/sw.js && git add ./static/sw.ts ./static/sw.js && git commit -m \"fix: build service worker\"",
		"build:specifier": "pwsh -c \"Write-Host -NoNewLine \\\"export const appVersion = '\\\" && git tag -l --sort=-creatordate | select -First 1 | Write-Host -NoNewLine $_ && Write-Host \\\"'\\\"\" > ./static/app_version.ts && deno fmt ./static/app_version.ts && git add ./static/app_version.ts && git commit -m \"fix: update version specifier\"",
		"build:changelog": "auto-changelog && git add CHANGELOG.md && git commit -m 'doc: update changelog'",
		"release": "deno task build:changelog && deno fmt CHANGELOG.md && deno task build:specifier && deno task build:serviceworker && git checkout production && git merge main && git push origin main production --tags && git checkout main",
		"bump:major": "pwsh -c 'git tag -l --sort=-creatordate | select -First 1 | %{\"$([int]$_.split(\".\")[0] + 1).0.0\"} | %{git tag $_}' && deno task release",
		"bump:minor": "pwsh -c 'git tag -l --sort=-creatordate | select -First 1 | %{\"$([int]$_.split(\".\")[0]).$([int]$_.split(\".\")[1] + 1).0\"} | %{git tag $_}' && deno task release",
		"bump:patch": "pwsh -c 'git tag -l --sort=-creatordate | select -First 1 | %{\"$([int]$_.split(\".\")[0]).$([int]$_.split(\".\")[1]).$([int]$_.split(\".\")[2] + 1)\"} | %{git tag $_}' && deno task release"
	},
	"importMap": "./import_map.json",
	"compilerOptions": {
		"jsx": "react-jsx",
		"jsxImportSource": "preact"
	}
}
